<!doctype html>
<html lang="de">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
    <meta name="generator" content="Hugo 0.104.2">
    <title>REVOLVING HI:STORIES</title>


    <link href="../static/bootstrap/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
    <link href="../static/bootstrap-icons/font/bootstrap-icons.min.css" rel="stylesheet" crossorigin="anonymous">

    <meta name="theme-color" content="#712cf9">

    <style>
        .bd-placeholder-img {
            font-size: 1.125rem;
            text-anchor: middle;
            -webkit-user-select: none;
            -moz-user-select: none;
            user-select: none;
        }

        @media (min-width: 768px) {
            .bd-placeholder-img-lg {
                font-size: 3.5rem;
            }
        }

        .b-example-divider {
            height: 3rem;
            background-color: rgba(0, 0, 0, .1);
            border: solid rgba(0, 0, 0, .15);
            border-width: 1px 0;
            box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);
        }

        .b-example-vr {
            flex-shrink: 0;
            width: 1.5rem;
            height: 100vh;
        }

        .bi {
            vertical-align: -.125em;
            fill: currentColor;
        }

        .nav-scroller {
            position: relative;
            z-index: 2;
            height: 2.75rem;
            overflow-y: hidden;
        }

        .nav-scroller .nav {
            display: flex;
            flex-wrap: nowrap;
            padding-bottom: 1rem;
            margin-top: -1px;
            overflow-x: auto;
            text-align: center;
            white-space: nowrap;
            -webkit-overflow-scrolling: touch;
        }
    </style>


    <!-- Custom styles for this template -->
    <link href="static/css/ibm-plex-serif.css" rel="stylesheet">
    <!-- Custom styles for this template -->
    <link href="static/css/blog.css" rel="stylesheet">
</head>
<body class="w-100">

<div class="container-fluid">
    <header class="col-12">
        <div class="row">
            <div class="col" style="-ms-flex: 0 0 192px; flex: 0 0 192px">
                <img style="height: 55px" src="static/img/revolving.png" alt="Title: REVOLVING HI:STORIES" />
            </div>
            <div class="col" style="-ms-flex: 0 0 143px; flex: 0 0 143px">
                <img style="height: 55px" src="static/img/histories.png" alt="Title: HI:STORIES" />
            </div>
        </div>
    </header>
</div>


<main class="container-fluid">

        <div class="row">
            <div class="col" style="height: 400px;" id="bubbleArea">
                </div>
        </div>
</main>
<footer class="blog-footer">
    <p>REVOLVING HI:STORIES build by info-age GmbH Basel</p>
    <p>
        <a href="#">Back to top</a>
    </p>
</footer>

<script src="static/bootstrap/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
<script src="static/js/d3.js"></script>
<script src="static/js/d3bubble.js"></script>
<script>
    const collections =  [
        {{- range $key, $coll := .Collections }}
        { id: '{{ $key }}', title: '{{ $coll.Title }}', link: '{{ $coll.Url }}', radius: {{ randInt 80 120}}, value: {{ divf (randInt 0 99) 100 }} },
        {{- end }}
    ]


    const area = document.getElementById('bubbleArea');
    const width = area.offsetWidth;
    const height = area.offsetHeight;

    const svg = d3.create("svg")
        .attr("width", width)
        .attr("height", height)
        .attr("viewBox", [0, 0, width, height])
        .attr("style", "max-width: 100%; height: auto; height: intrinsic;")
        .attr("fill", "currentColor")
        .attr("font-size", "0.7em")
        .attr("font-family", "sans-serif")
        .attr("text-anchor", "middle");


//    const width = 600, height = 400;

    const xScale = d3.scaleLinear().domain([0, 1]).range([0, width-100]);

    const numNodes = {{ len .Collections }}; // 40;
    const nodes = collections;


    const simulation = d3.forceSimulation(nodes)
        .force('charge', d3.forceManyBody().strength(5))
        .force('x', d3.forceX().x(function (d) {
            return xScale(d.value);
        }))
        .force('y', d3.forceY().y(function (d) {
            return 0;
        }))
        .force('collision', d3.forceCollide().radius(function (d) {
            return d.radius;
        }))
        .on('tick', ticked);

    function ticked() {
        const uid = `O-${Math.random().toString(16).slice(2)}`;
        /*
        const leaf = svg.selectAll('circle')
                .data(nodes)
                .join('circle')
                .attr('r', d => d.radius )
                .style('fill', "green")
                .attr('cx', d => d.x )
                .attr('cy', d  => d.y )
                .attr('transform', 'translate(' + [0, height/2] + ')')

        leaf.select('text').node() ?
            leaf
                .join('text')
                .join("tspan")
                .attr('x', d => d.x )
                .attr('y', d  => d.y )
                .text(d => d.title)
            :
            leaf
                .append('text')
                .append("tspan")
                .attr('x', d => d.x )
                .attr('y', d  => d.y )
                .text(d => d.title).node()
*/

        const leaf = svg.selectAll('g')
            .data(nodes)
            .join('g')
//            .attr('cx', d => d.x )
//            .attr('cy', d  => d.y )
            .attr('transform', d => 'translate(' + [d.x, d.y+height/2] + ')')

        leaf.select('circle').node() ?
            leaf
                .join('circle')
                .attr('r', d => d.radius )
                .style('fill', "green")
            :
            leaf
                .append('circle')
                .attr('r', d => d.radius )
                .style('fill', "green")

        leaf.select('text').node() ?
            nil
            :
            leaf
                .append('text')
                .attr('dx', 0 ) // d => `-${d.title.length/2}em` )
                .attr('dy', 0 )
                .attr('fill-opacity', 1)
                .style("stroke", "black")
                .text(d => d.title).node()
    }

    let container = document.getElementById('bubbleArea');

    // Append the SVG element.
    container.append(svg.node());

/*
    let collections =  [
        {{- range $coll := .Collections }}
           { title: '{{ $coll.Title }}', link: '{{ $coll.Url }}', value: {{ randInt 100 2000}} },
        {{- end }}
    ]

    let area = document.getElementById('bubbleArea');
    let width = area.offsetWidth;

    let chart = BubbleChart2(collections, {
        label: d => d.title,
        value: d => d.value,
        //group: d => d.id.split(".")[1],
        title: d => d.title,
        link: d => d.link,
        width: width,
        height: 300,
    })

    let container = document.getElementById('bubbleArea');

    // Append the SVG element.
    container.append(chart);
    */
</script>
</body>
</html>

